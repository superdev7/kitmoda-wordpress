<?php

/**
 * Description of class
 *
 * @author tahir
 */
class KSM_Cache {
    
    
    function __construct() {
        
    }
    
    static function Read($name) {
        if(!file_exists(DATA_STORE_PATH.'/'.$name.'.php')) {
            return false;
        }
        @include(DATA_STORE_PATH.'/'.$name.'.php');
            
        if(isset($cacheData)) {
            return $cacheData;
        }

        return false;
    }
        
        
        
    
    static function Save($name, $data) {
        $contents = "<"."?php\n\n/** KSM Cache File **\n  *\n";
        $contents .= "  * Generated: ".date('r')."\n  *\n  * DO NOT EDIT THIS FILE MANUALLY\n  *\n*/\n\n";
        $contents .= "\$cacheData = ".var_export($data, true).";\n";

        if(file_put_contents(DATA_STORE_PATH.'/'.$name.'.php', $contents)) {
            return true;
        } else {
            return false;
        }
    }


    public function Delete($name) {
        return @unlink(DATA_STORE_PATH.'/'.$name.'.php');
    }

    
    public function Disconnect() {
        return true;
    }
    
    public function Clear() {
        $files = scandir(DATA_STORE_PATH);
        foreach($files as $file) {
            if(!preg_match("#\.php\$#i", $file)) {
                continue;
            }
            $cacheName = preg_replace("#\.php\$#i", "", $file);
            if(!$this->Delete($cacheName)) {
                return false;
            }
        }
        return true;
    }
    
    
    static function options($name, $single_value = false) {
        
        $data = array();
        
        $file = KSM_LIB_PATH . 'Datastore' .  DIRECTORY_SEPARATOR . ucfirst($name) .".php";
        
        if(is_file($file)) {
            include $file;
        }
        
        $new_data = array();
        
        if($single_value) {
            foreach ($data as $k => $v) {
                $new_data[$k] = $v[$single_value];
            }
            return $new_data;
        }
        
        return $data;
    }
    
    
    
    
    static function option($name, $key) {
        $options = (Array) self::options($name);
        return $options[$key];
    }
    
    static function option_exist($name, $key) {
        $option = self::option($name, $key);
        return $option ? true : false;
    }
    
    static function get_terms($tax, $label='')  {
        $data = array();
        
        $name = implode('_', array_map('ucfirst', explode('_', $tax)));
        
        @include KSM_LIB_PATH."Datastore/Terms/{$name}.php";
        
        
        if($label) {
            foreach ($data as $k => $v) {
                $lbl = $v[$label] ? $v[$label] : $v['label'];
                $new_data[$k] = $lbl;
            }
        } else {
            $new_data = $data;
        }
        
        return $new_data;
    }
    
    
    static function term_exist($tax, $term) {
        $terms = self::get_terms($tax);
        return $terms[$term] ? true : false;
    }
    
}
